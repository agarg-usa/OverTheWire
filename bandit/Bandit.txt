https://overthewire.org/wargames/bandit/

ssh bandit29@bandit.labs.overthewire.org -p 2220
Each password refers to the password for the next level (flag found in that level)
bandit0

Level 0:
boJ9jbbUNNfktd78OOpsqOltutMc3MY1

Level 1:
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
Note: to access weird file names you can do "./(File Name)"
ex. cat ./-

level 2:
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

level 3:
pIwrPrtPN36QITSp3EQaw936yaFoFgAB

level 4:
koReBOKuIDDepwhWk7jZC0RTdopnAYKh

level 5:
DXjZPULLxYr17uwoI01bNLQbtFemEgo7

level 6:
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs

level 7:
cvX2JJa4CFALtqS87jk27qwqGhBM9plV

level 8:
NOTE: had to cheat for this one
	uniq only matches unique characters for adjacent lines
	one way to deal with this is to sort the file first
Note to self: use the man page more often and read it thoroughly

UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

level 9:
truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

level 10:
IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR

level 11:
5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu

level 12:
8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
bad level had to decompress stuff 10 times

level 13:
ssh bandit14@localhost -i sshkey.private
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e

level 14:
BfMYroe26WYalil77FoDi9qh59eK5xNr

level 15:
cluFn7wTiGryunymYOu4RcffSxQluehd

-used openssl s_client -connect localhost:8080
idk what i did exactly but it worked

level 16:
NOTE: nmap only scans the most popular ports
	https://serverfault.com/questions/391735/nmap-not-scanning-all-ports
	you can scan all ports (except port 0) with -p-
xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn

level 17:
kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd

level 18:
IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
Note: if you put a command after ssh, that command would be executed
ex: ssh bandit18@bandit.labs.overthewire.org -p 2220 /bin/sh
	this would execute /bin/sh directly (which is an alternative shell to bash)

level 19:
GbKksEFF4yrVs6il55v6gwY5aVje5f0j

level 20:
gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr

had to use nc -l <PORT NUMBER> to create an open port

level 21:
Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

cat /etc/cron.d/cronjob_bandit22

@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

the 5 astericks means that this file is being ran every single minute, its output
is redirected towards /dev/null (which is just a void file)

cat /usr/bin/cronjob_bandit22.sh

#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

level 22:
jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n

cat /etc/cron.d/cronjob_bandit23

@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null


cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"

cat /etc/bandit_pass/$myname > /tmp/$mytarget

mytarget = 8ca319486bfbbc3663ea0fbe81326349

#the trick here is that you can calculate the md5 hash yourself
#instead of using $myname as bandit22, you can make $myname to be bandit23 and get the pass

level 23:
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ

NOTE:
2 things got me stuck on this level
first thing was forgetting about file permissions
file permissions can be changed with chmod
to let anyone execute a file, you have to make sure it has the right permissions
one way to do this is "chmod 777 <FILE NAME>"
directories can also be chmod 666 <DIRECTORY> so that anyone can write to them
the second thing is that you need to put #!/bin/bash for bash scripts

cat /etc/cron.d/cronjob_bandit24
@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null

cat /usr/bin/cronjob_bandit24.sh
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname
echo "Executing and deleting all scripts in /var/spool/$myname:"
#/var/spool/bandit24 you can access / write to

for i in * .*;
do
    if [ "$i" != "." -a "$i" != ".." ];
    then
        echo "Handling $i"
        owner="$(stat --format "%U" ./$i)"
        if [ "${owner}" = "bandit23" ]; then
            timeout -s 9 60 ./$i
        fi
        rm -f ./$i
    fi
done

My Script (given slayerban24 dir was already created with the right permissions):

#!/bin/bash

cat /etc/bandit_pass/bandit24 > /tmp/slayerban24/testFile

Level 24:
uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG

import socket

password = "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ"
with socket.socket() as s:
    s.connect(("127.0.0.1", 30002))
    print(s.recv(1024))
    for i in range(2000,10000):
        s.sendall(bytes(password + " " + str(i).zfill(4) + "\n", encoding="UTF-8"))
        if not str(s.recv(1024)).__contains__("Wrong"):
            print("pincode is " + str(i).zfill(4))
            exit()
        else:
            print("pincode is not " + str(i).zfill(4))


Level 25:
5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z

I did cheat on this one
Notes: /etc/passwd stores special things about different users (ex. what shell will be executed)
the "more" command helps you read files line by line
the "more" command will only actually do something if your terminal window can not fit the whole file in one screen
you can press "v" on the more command to access vim
once you are in vim, you can do :e <file> to edit that file

level 26:
I cheated on this one too, because its cringe
do keep in mind, a "shell" is something that just like accepts input
bash is a powerful shell
technically /bin/echo is also a shell, which does nothing but echo
3ba3118a22e93127a4ed485be72ef5ea

level 27:
0ef186ac70e04ea33b4c1853d2526fa2

level 28:
https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet
bbc96594b4e001778eee9975372716b2

level 29:
5b90576bedb2cc04c86a9e924ce42faf
to view all branches, do git diff -a
to change current branch do git checkout <branch>
when changing branches, it will change the actual file structure too

level 30:
git tag shows all the tags
	tags are kind of like "pointers" to a specific point in a branch, so instead of having a whole
	hash for the branch you can have a nice simple name (ex. v1.0)
there are 2 types of tags, lightweight and annotated. Annotated tags have more info with them
while lightweight tags are just pointers
Annotated tags are treated like actual objects with checksums and everything

Other thing is git show, which shows a specific file and its changes (ex. when it was commited)
47e603bb428404d265f59c42920d81e5

level 31:
56a9bf19c63d650ce78e6ec0354ee45e

git add to track a file
git commit -m <message>
git push

level 32:
c9c3199ddf4121b10cf581a98d51caee
??? no idea how one would solve this
